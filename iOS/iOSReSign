#!/bin/bash

#if [ ! -d $1 ];then
#	echo "Error! The first param must be a directory."
#	exit 2
#fi

_IPA_PATH=$1;

KEY_AppBundleIdentifier="AppBundleIdentifier"
KEY_ProvisionProfilePath="ProvisionProfilePath"
KEY_Certificate="Certificate"
KEY_ResourceRules="ResourceRules"
KEY_Out="Out"

declare _AppBundleIdentifier
declare _ProvisionProfilePath
declare _Certificate
declare _ResourceRules
declare _Out

echo ""
echo "===================== reSign start ====================="

declare keys=()
declare values=()

count=1;
function getKeyAndValue(){
    local key=`echo $1 | awk -F "[-=]" '{print $2}'`
    local value=`echo $1 | awk -F "[-=]" '{print $3}'`
    keys[$count]=$key
    values[$count]=$value
    count=$(($count+1))
}

for arg in "$@"
do
    [[ $arg == "-"*"="* ]] && getKeyAndValue $arg
done

#for (( i=1; i<count; i++ ))
#do
#    echo ""
#    echo $i
#    echo "key="${keys[$i]}
#    echo "value="${values[$i]}
#    echo ""
#done

for (( i=1; i<count; i++ ))
do
    case ${keys[$i]} in
        $KEY_AppBundleIdentifier)
            _AppBundleIdentifier=${values[$i]}
            ;;
        $KEY_ProvisionProfilePath)
            _ProvisionProfilePath=${values[$i]}
            ;;
        $KEY_Certificate)
            _Certificate=${values[$i]}
            ;;
        $KEY_ResourceRules)
            _ResourceRules=${values[$i]}
        ;;
        $KEY_Out)
            _Out=${values[$i]}
        ;;
    esac
done

echo "ipa path=$_IPA_PATH"
echo "-$KEY_AppBundleIdentifier=$_AppBundleIdentifier"
echo "-$KEY_ProvisionProfilePath=$_ProvisionProfilePath"
echo "-$KEY_Certificate=$_Certificate"
echo "-$KEY_ResourceRules=$_ResourceRules"
echo "-$KEY_Out=$_Out"
echo ""
sleep 2

echo ""
echo "===================== remove out file ====================="

#cd $_Out
rm -rf $_Out/entitlements.plist
rm -rf $_Out/Payload/
rm -rf $_Out/reSign.ipa

echo ""
echo "===================== unzip ipa ====================="
echo $_IPA_PATH

unzip $_IPA_PATH -d $_Out

appFoulderName=""
dir=$(ls $_Out/Payload/ |awk '/.app/')
for i in $dir
do
appFoulderName=$i
done

rm -rf $_Out/Payload/$appFoulderName/_CodeSignature

if [ ! -z "$_ProvisionProfilePath" ]; then
    echo ""
    echo "===================== update provision profile ====================="
    echo $_ProvisionProfilePath
    cp $_ProvisionProfilePath $_Out/Payload/$appFoulderName/embedded.mobileprovision
fi

/usr/libexec/PlistBuddy -x -c "print :Entitlements " /dev/stdin <<< $(security cms -D -i $_Out/Payload/$appFoulderName/embedded.mobileprovision) > $_Out/entitlements.plist

if [ ! -z "$_AppBundleIdentifier" ]; then
    echo ""
    echo "===================== update bundle identifier ====================="
    echo $_AppBundleIdentifier
    /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier ${_AppBundleIdentifier}" $_Out/Payload/$appFoulderName/Info.plist
fi

codesign_cmd="codesign -fs ${_Certificate} --entitlements=${_Out}/entitlements.plist"

if [ ! -z "$_ResourceRules" ]; then
    codesign_cmd=$codesign_cmd" --resource-rules=${_ResourceRules} "
fi


echo ""
echo "===================== codesign PlugIns ====================="

#签名PlugIns
Default_IFS=$IFS
IFS=$'\n' #这个必须要，否则会在文件名中有空格时出错

dir=$(ls $_Out/Payload/$appFoulderName/PlugIns/ |awk '/appex/')
for i in $dir
do
    framework_path=${_Out}/Payload/$appFoulderName/PlugIns/${i};
    #framework_path=${framework_path//' '/'\ '}
    echo ""
    echo "sign" $framework_path

    if [ ! -z "$_AppBundleIdentifier" ]; then
        AppxBundleId=`/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier ${_AppBundleIdentifier}" ${framework_path}/Info.plist`
        echo "oldBundleId = ${AppxBundleId}"
        /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier ${_AppBundleIdentifier}.${AppxBundleId##*.}" ${framework_path}/Info.plist
        AppxBundleId=`/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier ${_AppBundleIdentifier}" ${framework_path}/Info.plist`
        echo "newBundleId = ${AppxBundleId}"
    fi

    rm -rf ${framework_path}/_CodeSignature
    echo ">>>>>>>>>" codesign -fs ${_Certificate} --entitlements=${_Out}/entitlements.plist ${framework_path}
    codesign -fs ${_Certificate} --entitlements=${_Out}/entitlements.plist ${framework_path}
done

echo ""
echo "===================== codesign frameworks ====================="

#签名Frameworks
dir=$(ls -l $_Out/Payload/$appFoulderName/Frameworks/ |awk '/^d/ {print $NF}')

for i in $dir
do
    framework_path=${_Out}/Payload/$appFoulderName/Frameworks/${i};
    #framework_path=${framework_path//' '/'\ '}
    echo ""
    echo "sign" $framework_path

    rm -rf ${framework_path}/_CodeSignature
    # echo codesign -fs ${_Certificate} --entitlements=${_Out}/entitlements.plist ${framework_path}
    # codesign -fs ${_Certificate} --entitlements=${_Out}/entitlements.plist ${framework_path}
    echo ">>>>>>>>>" codesign -fs ${_Certificate} ${framework_path}
    codesign -fs ${_Certificate} ${framework_path}
done

echo ""
echo "===================== codesign dylib ====================="

#签名.dylib
dir=$(ls $_Out/Payload/$appFoulderName/Frameworks/ |awk '/.dylib/')

for i in $dir
do
    dylib_path=${_Out}/Payload/$appFoulderName/Frameworks/${i};
    echo ""
    echo "sign" $dylib_path

    echo ">>>>>>>>>" codesign -fs ${_Certificate} --entitlements=${_Out}/entitlements.plist ${dylib_path}
    codesign -fs ${_Certificate} --entitlements=${_Out}/entitlements.plist ${dylib_path}
done

IFS=$Default_IFS

echo ""
echo "===================== codesign app ====================="

#签名App
codesignApp_cmd=$codesign_cmd" ${_Out}/Payload/${appFoulderName} "

echo ">>>>>>>>>" $codesignApp_cmd
$codesignApp_cmd

currentPath=${pwd}

echo ""
echo "===================== zip ipa ====================="

cd ${_Out}
zip -r ${_Out}/reSign.ipa Payload

echo ""
echo "===================== finish ====================="
echo "out ipa" ${_Out}/reSign.ipa
echo ""

exit

